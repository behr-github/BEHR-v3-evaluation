function [ varargout ] = geos_chem_delAMF( new_struct, old_struct, species_name, time_ind, space_bool )
%geos_chem_mpn_delAMF Create a map showing the change in OMI AMF for two GEOS-CHEM profiles
%   This function takes two structures generated by read_geos_output, a
%   species name as a string, and a time index.  This index can be a
%   literal index (1 for the first time, 2 for the second) or a date
%   number.
%
%   The fifth argument is optional. It is a logical matrix with size 144 x
%   91 that represents which GEOS-Chem grid cells to calculate this for.

E = JLLErrors;

% Check input variables
if ~isstruct(new_struct) || ~isstruct(old_struct)
    error(E.badinput('The first two inputs must be structures from read_geos_output.'));
elseif ~ischar(species_name)
    error(E.badinput('The third input must be a string.'));
elseif ~isscalar(time_ind) || ~isnumeric(time_ind)
    error(E.badinput('The fourth input must be a scalar number'));
end



global onCluster;
if isempty(onCluster);
    onCluster = 0;
end

%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% USER VARIABLES %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%

lonlim = [-180,180];
latlim = [-90,90];

SZA = 55;
VZA = 56;
RAA = 100;

% Check for the environmental variable MATLAB_DISPLAY from the shell (set
% by the startmatlab alias defined in my .bashrc). 
waitbar_bool = isDisplay();

% Where the OMLER albedo file can be found
if onCluster
    albfile = '/global/home/users/laughner/myscratch/SAT/OMI/OMLER/OMI-Aura_L3-OMLER_2005m01-2009m12_v003-2010m0503t063707.he5'; 
else
    albfile = '/Volumes/share/GROUP/SAT/OMI/OMLER/OMI-Aura_L3-OMLER_2005m01-2009m12_v003-2010m0503t063707.he5';
end

[fileDamf,fileTmp] = amf_filepaths;

omi_presLevels = OMNO2PresLev;

E = JLLErrors;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% GET SURFACE PRESSURE FOR EACH CELL %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%if waitbar_bool
%    wb = waitbar(0,'Getting surface pressure and albedo...');
%end

% If the flag to use GLOBE data is set, average the surface pressure to the
% cell.  Otherwise, use the surface pressure output from GEOS-Chem.

% Load the GEOS-CHEM pixel corners.
[gc_loncorn, gc_latcorn] = geos_chem_corners;
% The .mat files from Ben have longitude x latitude, so these need flipped
gc_loncorn = gc_loncorn'; gc_latcorn = gc_latcorn';
gc_sz = size(gc_loncorn)-1;

% If no "space_bool" was passed, create a logical matrix that will indicate
% that all pixels should be considered.

if nargin < 5
    space_bool = true(gc_sz);
elseif ~ismatrix(space_bool) || ~all(size(space_bool)==gc_sz)
    E.badinput('The optional argument space_bool is expected to have the dimensions 144 x 91 - i.e. a 2D matrix the same size as GEOS-Chem lon x lat at 2.5 x 2 deg.');
end

% Find the chemical species we're after and the pressure fields:
new_spec_ind = -1;
new_pres_ind = -1;
new_trop_ind = -1;
new_cldfrc_ind = -1;
new_cldtop_ind = -1;
for a=1:numel(new_struct)
    if ~isempty(regexpi(new_struct(a).fullName,species_name));
        new_spec_ind = a;
    elseif ~isempty(regexpi(new_struct(a).fullName,'Surface pressure'))
        new_pres_ind = a;
    elseif ~isempty(regexpi(new_struct(a).fullName,'Tropopause level'));
        new_trop_ind = a;
    elseif ~isempty(regexpi(new_struct(a).fullName,'GMAO CLDFRC field'));
        new_cldfrc_ind = a;
    elseif ~isempty(regexpi(new_struct(a).fullName,'GMAO CLDTOP field'));
        new_cldtop_ind = a;
    end
end
if new_spec_ind == -1
    error(E.badinput('Couldn''t find %s in the new_struct structure',species_name));
elseif new_pres_ind == -1
    error(E.badinput('Couldn''t find pressures in the new_struct structure'));
elseif new_trop_ind == -1
    error(E.badinput('Couldn''t find tropopause pressures in the new_struct structure'));
elseif new_cldfrc_ind == -1
    warning('Couldn''t find cloud fractions in the old_struct structure, using 0 clouds');
elseif new_cldtop_ind == -1
    warning('Couldn''t find cloud top pressures in the old_struct structure, using 0 clouds');
end

old_spec_ind = -1;
old_pres_ind = -1;
old_trop_ind = -1;
old_cldfrc_ind = -1;
old_cldtop_ind = -1;
for a=1:numel(old_struct)
    if ~isempty(regexpi(old_struct(a).fullName,species_name));
        old_spec_ind = a;
    elseif ~isempty(regexpi(old_struct(a).fullName,'Surface pressure'))
        old_pres_ind = a;
    elseif ~isempty(regexpi(old_struct(a).fullName,'Tropopause level'));
        old_trop_ind = a;
    elseif ~isempty(regexpi(old_struct(a).fullName,'GMAO CLDFRC field'));
        old_cldfrc_ind = a;
    elseif ~isempty(regexpi(old_struct(a).fullName,'GMAO CLDTOP field'));
        old_cldtop_ind = a;
    end
end
if old_spec_ind == -1
    error(E.badinput('Couldn''t find %s in the old_struct structure',species_name));
elseif old_pres_ind == -1
    error(E.badinput('Couldn''t find pressures in the old_struct structure'));
elseif old_trop_ind == -1
    error(E.badinput('Couldn''t find tropopause pressures in the old_struct structure'));
elseif old_cldfrc_ind == -1
    warning('Couldn''t find cloud fractions in the old_struct structure, using 0 clouds');
elseif old_cldtop_ind == -1
    warning('Couldn''t find cloud top pressures in the old_struct structure, using 0 clouds');
end

% Get the time index, if it's greater than 100000 its probably a date
% number (note, datestr(100000) is Oct 15, 273.  No, that's not a typo.).
% Otherwise just treat it as and index.
if time_ind < 100000
    % Check that it's a valid index
    if time_ind > numel(new_struct(1).tVec)
        error(E.badinput('%d is being treated as a linear index, but the maximum index for the new_struct is %d',time_ind,numel(new_struct(1).tVec)));
    end
else
    time_ind = find(new_struct(1).tVec == time_ind);
end
this_month = month(new_struct(1).tVec(time_ind));

% Load pressures
new_pres = new_struct(new_pres_ind).dataBlock(:,:,:,time_ind);
old_pres = old_struct(old_pres_ind).dataBlock(:,:,:,time_ind);
% Convert to pressure bin centers
new_pres = (new_pres(:,:,1:end-1) + new_pres(:,:,2:end))./2;
old_pres = (old_pres(:,:,1:end-1) + old_pres(:,:,2:end))./2;

    
%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% COMPARE AMFS %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%


% Average the OMLER albedo to GEOS-Chem grid cells
hi = h5info(albfile);
omler_alb = h5read(albfile,h5dsetname(hi,1,2,1,1,4));
omler_alb = double(omler_alb)/1000;
omler_alb(omler_alb>1) = 1; omler_alb(omler_alb<0) = 0;
omler_lon = h5read(albfile,h5dsetname(hi,1,2,1,1,'Longitude'));
omler_lat = h5read(albfile,h5dsetname(hi,1,2,1,1,'Latitude'));

gc_alb = nan(gc_sz);
parfor a=1:gc_sz(1)
    row_of_albs = nan(1,gc_sz(2));
    for b=1:gc_sz(2)
        lats = gc_latcorn(a:a+1,b:b+1);
        lons = gc_loncorn(a:a+1,b:b+1);
        yy = omler_lat >= lats(1) & omler_lat <= lats(end);
        xx = omler_lon >= lons(1) & omler_lon <= lons(end);
        albs = omler_alb(xx,yy,19,this_month);
        row_of_albs(b) = nanmean(albs(:));
    end
    gc_alb(a,:) = row_of_albs;
end

new_profiles = new_struct(new_spec_ind).dataBlock(:,:,:,time_ind);
old_profiles = old_struct(old_spec_ind).dataBlock(:,:,:,time_ind);

new_tropopause = new_struct(new_trop_ind).dataBlock(:,:,time_ind);
old_tropopause = old_struct(old_trop_ind).dataBlock(:,:,time_ind);

if new_cldfrc_ind == -1 || new_cldtop_ind == -1 || old_cldfrc_ind == -1 || old_cldtop_ind == -1
    new_cldfrcs = zeros(size(gc_alb));
    old_cldfrcs = zeros(size(gc_alb));
    
    new_cldtops = zeros(size(gc_alb));
    old_cldtops = zeros(size(gc_alb));
else
    new_cldfrcs = new_struct(new_cldfrc_ind).dataBlock(:,:,time_ind);
    old_cldfrcs = old_struct(old_cldfrc_ind).dataBlock(:,:,time_ind);
    
    new_cldtops = new_struct(new_cldtop_ind).dataBlock(:,:,time_ind);
    old_cldtops = old_struct(old_cldtop_ind).dataBlock(:,:,time_ind);
end

new_amf_grid = nan(gc_sz);
old_amf_grid = nan(gc_sz);

% Loop over each profile
parfor a=1:gc_sz(1)
    fprintf('%d: waitbar_bool = %d',a,waitbar_bool);
    %if waitbar_bool
     %   waitbar(a/gc_sz(1),wb,'Calculating GEOS-Chem AMFs');
    %else
        fprintf('Progress: %d of %d rows\n',a,gc_sz(1));
    %end

    new_amf_row = nan(1,gc_sz(2));
    old_amf_row = nan(1,gc_sz(2));
    
    space_bool_row = space_bool(a,:);
    for b=1:gc_sz(2)
        % If the space_bool is false here, skip this one.  This is useful
        % if you only want to look at the dAMF for cells that meet certain
        % criteria, i.e. percent of NO from lightning.
        if ~space_bool_row(b);
            continue
        end
        this_new_prof = new_profiles(a,b,:);
        this_new_prof = squeeze(this_new_prof);
        this_new_pres = new_pres(a,b,:);
        this_new_pres = squeeze(this_new_pres);
        this_new_trop = new_tropopause(a,b);
        this_new_cldfrc = new_cldfrcs(a,b);
        this_new_cldtop = new_cldtops(a,b);
        this_old_prof = old_profiles(a,b,:);
        this_old_prof = squeeze(this_old_prof);
        this_old_pres = old_pres(a,b,:);
        this_old_pres = squeeze(this_old_pres);
        this_old_trop = old_tropopause(a,b);
        this_old_cldfrc = old_cldfrcs(a,b);
        this_old_cldtop = old_cldtops(a,b);
        
        % Restrict to pressures below the tropopause. Tropopause is
        % indicated by level (i.e. the vertical box number), so we look for
        % levels below the tropopause height.
        new_xx = 1:length(this_new_prof) < this_new_trop;
        this_new_prof = this_new_prof(new_xx);
        this_new_pres = this_new_pres(new_xx);
        
        old_xx = 1:length(this_old_prof) < this_old_trop;
        this_old_prof = this_old_prof(old_xx);
        this_old_pres = this_old_pres(old_xx);
        
        if all(isnan(this_new_prof)) || all(isnan(this_old_prof))
            continue
        end
        
        % Get the average albedo and surface pressure for this cell
        ALB = gc_alb(a,b);
        
        new_SurfP = this_new_pres(1);
        old_SurfP = this_old_pres(1);
        
        % The cloud top heights are given as a level, not a pressure.
        % So we want to convert between them.  Since the cloud top height
        % can be a fractional level, we'll interpolate the pressure to find
        % the best approximation of the could top pressure. Just in case
        % this_new_cldtop is outside the range of levels available in the 
        % troposphere, clamp it to the available levels.
        
        this_new_cldtop = min(max(this_new_cldtop,1),length(this_new_pres));
        this_new_cldtop_pres = interp1(1:length(this_new_pres),this_new_pres,this_new_cldtop);
        if isnan(this_new_cldtop_pres)
            error(E.badvar('this_new_cldtop_press'));
        end
        
        this_old_cldtop = min(max(this_old_cldtop,1),length(this_old_pres));
        this_old_cldtop_pres = interp1(1:length(this_old_pres),this_old_pres,this_old_cldtop);
        if isnan(this_old_cldtop_pres)
            error(E.badvar('this_old_cldtop_pres'));
        end
        
        % Estimate the cloud radiance fractions for the corresponding
        % geometric fractions
        this_new_cld_radfrac = cld_rad_frac_interp(this_new_cldfrc);
        this_old_cld_radfrac = cld_rad_frac_interp(this_old_cldfrc);
        
        
        % Interpolate (logarithmically) to the OMI pressure levels. (rDamf2
        % will interpolate to any set of pressure levels - should try
        % skipping this interpolation)
%         this_mpn_prof_omi = interp1(log(gc_presLevels), log(this_new_prof), log(omi_presLevels));
%         this_nompn_prof_omi = interp1(log(gc_presLevels), log(this_old_prof), log(omi_presLevels));
%         this_mpn_prof_omi = exp(this_mpn_prof_omi);
%         this_nompn_prof_omi = exp(this_nompn_prof_omi);
        
        dAmfClr_new = rDamf2(fileDamf, this_new_pres, SZA, VZA, RAA, ALB, new_SurfP);
        dAmfClr_old = rDamf2(fileDamf, this_old_pres, SZA, VZA, RAA, ALB, old_SurfP);
        
        % We're using cloud data directly from GEOS-Chem which 1) its grid
        % cells are much bigger than an OMI pixel, so we won't filter by
        % cloud fraction. This is solely to get an impression of how cloud
        % variables affect the AMF difference.
        cloudalbedo=0.8;
        dAmfCld_new = rDamf2(fileDamf, this_new_pres, SZA, VZA, RAA, cloudalbedo, this_new_cldtop_pres);
        dAmfCld_old = rDamf2(fileDamf, this_old_pres, SZA, VZA, RAA, cloudalbedo, this_old_cldtop_pres);
        
        this_lon = gc_loncorn(a:a+1,b:b+1);
        this_lon = mean(this_lon(:));
        this_lat = gc_latcorn(a:a+1,b:b+1);
        this_lat = mean(this_lat(:));
        % Too extreme a lat cannot be interpolated.
        if this_lat < -89; this_lat = -89;
        elseif this_lat > 89; this_lat = 89;
        end
        new_temperature = rNmcTmp2(fileTmp, this_new_pres', this_lon, this_lat, this_month);
        old_temperature = rNmcTmp2(fileTmp, this_old_pres', this_lon, this_lat, this_month);
        
        noGhost = 1; ak = 0;
        new_amf = omiAmfAK2(new_SurfP, this_new_cldtop_pres, this_new_cldfrc, this_new_cld_radfrac, this_new_pres, dAmfClr_new, dAmfCld_new, new_temperature', this_new_prof, this_new_prof, noGhost, ak);
        old_amf = omiAmfAK2(old_SurfP, this_old_cldtop_pres, this_old_cldfrc, this_old_cld_radfrac, this_old_pres, dAmfClr_old, dAmfCld_old, old_temperature', this_old_prof, this_old_prof, noGhost, ak);

        new_amf_row(b) = new_amf;
        old_amf_row(b) = old_amf;
    end
    
    new_amf_grid(a,:) = new_amf_row;
    old_amf_grid(a,:) = old_amf_row;
end

if nargout < 1
    putvar(new_amf_grid, old_amf_grid);
else
    varargout{1} = new_amf_grid;
    varargout{2} = old_amf_grid;
end
%if waitbar_bool; close(wb); end
end

